import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/country.dart';
import '../services/country_service.dart';
import '../services/settings_service.dart';
import '../services/translation_service.dart';
import 'package:go_router/go_router.dart';

/// Écran de sélection de pays - Design exact de l'image de référence
class CountrySelectionScreen extends StatefulWidget {
  const CountrySelectionScreen({super.key});

  @override
  State<CountrySelectionScreen> createState() => _CountrySelectionScreenState();
}

class _CountrySelectionScreenState extends State<CountrySelectionScreen> {
  final CountryService _countryService = CountryService();
  final TextEditingController _searchController = TextEditingController();

  List<Country> _allCountries = [];
  List<Country> _filteredCountries = [];
  Country? _selectedCountry;
  bool _termsAccepted = false;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadCountries();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _loadCountries() async {
    setState(() => _isLoading = true);
    
    try {
      await _countryService.initialize();
      final countries = await _countryService.fetchCountriesFromAPI();
      setState(() {
        _allCountries = countries;
        _filteredCountries = countries;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorSnackBar('Erreur lors du chargement des pays');
    }
  }

  void _filterCountries(String query) {
    setState(() {
      if (query.isEmpty) {
        _filteredCountries = _allCountries;
      } else {
        _filteredCountries = _allCountries.where((country) =>
          country.sDescr.toLowerCase().contains(query.toLowerCase())
        ).toList();
      }
    });
  }

  void _selectCountry(Country country) async {
    setState(() {
      _selectedCountry = country;
      // Mettre à jour le champ de recherche avec le pays sélectionné
      _searchController.text = country.sDescr;
      // Vider la liste filtrée pour ne plus afficher la recherche
      _filteredCountries = [country];
    });

    // Charger les traductions pour la langue du pays sélectionné
    if (mounted && country.sPaysLangue != null) {
      final translationService = Provider.of<TranslationService>(context, listen: false);
      await translationService.changeLanguage(country.sPaysLangue!);
    }
  }

  Future<void> _saveSettings() async {
    if (_selectedCountry != null && _termsAccepted) {
      setState(() => _isLoading = true);
      
      final settingsService = Provider.of<SettingsService>(context, listen: false);
      final success = await settingsService.saveCountrySelection(
        selectedCountry: _selectedCountry!,
        termsAccepted: _termsAccepted,
      );
      
      if (success && mounted) {
        context.go('/home');
      } else {
        setState(() => _isLoading = false);
        _showErrorSnackBar('Erreur lors de la sauvegarde');
      }
    } else {
      _showErrorSnackBar('Veuillez sélectionner un pays et accepter les conditions');
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showTermsDialog({required TranslationService translationService}) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(translationService.translate('viewTerms')),
        content: const SingleChildScrollView(
          child: Text(
            'En utilisant Jirig, vous acceptez nos conditions d\'utilisation...\n\n'
            'Pour plus d\'informations, consultez notre politique.',
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Fermer'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Détection de la taille de l'écran pour la responsivité mobile
    final screenSize = MediaQuery.of(context).size;
    final screenWidth = screenSize.width;
    final screenHeight = screenSize.height;
    final isMobile = screenWidth < 768;
    final isSmallMobile = screenWidth < 360;
    
    return Consumer<TranslationService>(
      builder: (context, translationService, child) {
        // Ajustement des dimensions selon l'écran
        final horizontalPadding = isMobile ? (isSmallMobile ? 12.0 : 16.0) : 20.0;
        final verticalPadding = isMobile ? 60.0 : 80.0;
        final bottomPadding = isMobile ? 60.0 : 80.0;
        final containerPadding = horizontalPadding; // Même espacement que l'extérieur du container
        final borderRadius = isMobile ? 8.0 : 12.0;
    
    return Scaffold(
      backgroundColor: Colors.white,
      body: Stack(
        children: [
          // Image de fond hero5.png
          Positioned(
            top: -30,
            left: 0,
            right: 0,
            bottom: -100,
            child: Image.asset(
              'assets/images/hero5.png',
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) {
                return Container(color: Colors.white);
              },
            ),
          ),
          // Contenu principal
          SafeArea(
            child: SingleChildScrollView(
              physics: const AlwaysScrollableScrollPhysics(),
              padding: EdgeInsets.only(
                left: horizontalPadding, 
                right: horizontalPadding, 
                top: verticalPadding, 
                bottom: bottomPadding
              ),
              child: Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: BorderRadius.circular(borderRadius),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      offset: const Offset(0, 5),
                    ),
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 20,
                      offset: const Offset(0, 10),
                    ),
                  ],
                ),
                child: Padding(
                  padding: EdgeInsets.only(
                    left: containerPadding, 
                    right: containerPadding, 
                    top: isMobile ? 40.0 : 50.0, 
                    bottom: isMobile ? 40.0 : 50.0
                  ),
                  child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Titre principal
                  _buildTitle(isMobile: isMobile, translationService: translationService),
                  
                  SizedBox(height: isMobile ? 12 : 16),
                  
                  // Sous-titre
                  _buildSubtitle(isMobile: isMobile, translationService: translationService),
                  
                  SizedBox(height: isMobile ? 24 : 32),
                  
                  // Section pays d'origine
                  _buildCountrySection(isMobile: isMobile, translationService: translationService),
                  
                  SizedBox(height: isMobile ? 24 : 32),
                  
                  // Checkbox et conditions
                  _buildTermsSection(translationService: translationService),
                  
                  SizedBox(height: isMobile ? 32 : 40),
                  
                  // Bouton Terminer
                  _buildSubmitButton(translationService: translationService),
                  
                  SizedBox(height: isMobile ? 16 : 20),
                  
                  // Note de bas de page
                  _buildFooterNote(translationService: translationService),
                ],
              ),
            ),
          ),
        ],
      ),
    );
      },
    );
  }

  Widget _buildTitle({bool isMobile = false, required TranslationService translationService}) {
    return RichText(
      textAlign: TextAlign.center,
      text: TextSpan(
        style: TextStyle(
          fontSize: isMobile ? 20 : 24,
          fontWeight: FontWeight.bold,
          color: Colors.black,
          height: 1.1,
        ),
        children: [
          TextSpan(text: translationService.translate('findArticles') + ' '),
          TextSpan(
            text: 'IKEA',
            style: TextStyle(
              color: Colors.amber[700],
            ),
          ),
          TextSpan(text: ' ' + translationService.translate('cheaperWith') + ' '),
          TextSpan(
            text: 'Jirig',
            style: TextStyle(
              color: Color(0xFF2196F3),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSubtitle({bool isMobile = false, required TranslationService translationService}) {
    return Text(
      'Comparez les prix IKEA dans différents pays et trouvez les meilleures offres.',
      style: TextStyle(
        fontSize: isMobile ? 12 : 14,
        color: Colors.grey[700],
        height: 1.3,
      ),
      textAlign: TextAlign.center,
    );
  }

  Widget _buildCountrySection({bool isMobile = false, required TranslationService translationService}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'Votre pays d\'origine',
            style: TextStyle(
              fontSize: isMobile ? 14 : 16,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Barre de recherche avec pays sélectionné
        TextField(
          controller: _searchController,
          onChanged: _filterCountries,
          decoration: InputDecoration(
            hintText: _selectedCountry == null ? translationService.translate('searchPlaceholder') : null,
            hintStyle: TextStyle(
              color: Colors.grey[400],
              fontSize: 14,
            ),
            // Afficher le pays sélectionné avec drapeau
            prefixIcon: _selectedCountry != null 
              ? Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Drapeau
                      Container(
                        width: 20,
                        height: 15,
                        decoration: BoxDecoration(
                          color: Colors.grey[300],
                          borderRadius: BorderRadius.circular(2),
                        ),
                        child: Center(
                          child: Text(
                            _getCountryFlag(_selectedCountry!.sPays),
                            style: const TextStyle(fontSize: 10),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      // Nom du pays
                      Expanded(
                        child: Text(
                          _selectedCountry!.sDescr,
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.black87,
                          ),
                        ),
                      ),
                    ],
                  ),
                )
              : null,
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Colors.black, width: 1),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Colors.black, width: 1),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Colors.black, width: 1.5),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 25,
              vertical: 12,
            ),
          ),
        ),
        
        SizedBox(height: isMobile ? 4 : 6),
        
        // Liste des pays avec drapeaux
        _buildCountryList(isMobile: isMobile, translationService: translationService),
      ],
    );
  }

  Widget _buildCountryList({bool isMobile = false, required TranslationService translationService}) {
    final containerHeight = isMobile ? 240.0 : 320.0;
    
    if (_isLoading) {
      return Container(
        height: containerHeight,
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300]!, width: 1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    if (_filteredCountries.isEmpty) {
      return Container(
        height: containerHeight,
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300]!, width: 1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Center(
          child: Text(
            'Aucun pays trouvé',
            style: TextStyle(
              color: Colors.grey[500],
              fontSize: 14,
            ),
          ),
        ),
      );
    }

    return Container(
      height: containerHeight,
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.15),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ScrollbarTheme(
        data: ScrollbarThemeData(
          thumbColor: MaterialStateProperty.all(Colors.grey[800]),
          trackColor: MaterialStateProperty.all(Colors.grey[300]),
          thickness: MaterialStateProperty.all(6.0),
          radius: const Radius.circular(3),
        ),
        child: NotificationListener<ScrollNotification>(
          onNotification: (ScrollNotification scrollInfo) {
            // Empêcher la propagation du scroll vers le parent
            return true;
          },
          child: ListView.builder(
              padding: EdgeInsets.zero,
              physics: const ClampingScrollPhysics(),
              itemCount: _filteredCountries.length,
              itemBuilder: (context, index) {
            final country = _filteredCountries[index];
            final isSelected = _selectedCountry?.sPays == country.sPays;
            
            return InkWell(
              onTap: () => _selectCountry(country),
              hoverColor: Colors.grey[100],
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 10,
                ),
                color: isSelected ? const Color(0xFFE3F2FD) : Colors.white,
                child: Row(
                  children: [
                    // Drapeau emoji (remplacer par vrai drapeau si disponible)
                    Container(
                      width: 28,
                      height: 20,
                      decoration: BoxDecoration(
                        color: Colors.grey[300],
                        borderRadius: BorderRadius.circular(3),
                      ),
                      child: Center(
                        child: Text(
                          _getCountryFlag(country.sPays),
                          style: const TextStyle(fontSize: 14),
                        ),
                      ),
                    ),
                    
                    const SizedBox(width: 10),
                    
                    // Nom du pays
                    Expanded(
                      child: Text(
                        country.sDescr,
                        style: TextStyle(
                          fontSize: isMobile ? 14 : 16,
                          color: Colors.black87,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                    
                  ],
                ),
              ),
            );
          },
        ),
        ),
      ),
    );
  }

  String _getCountryFlag(String countryCode) {
    // Mapping simple de codes pays vers emojis de drapeaux
    const flags = {
      'BE': '🇧🇪',
      'FR': '🇫🇷',
      'DE': '🇩🇪',
      'ES': '🇪🇸',
      'IT': '🇮🇹',
      'NL': '🇳🇱',
      'PT': '🇵🇹',
      'GB': '🇬🇧',
      'US': '🇺🇸',
      'CA': '🇨🇦',
    };
    return flags[countryCode] ?? '🏳️';
  }

  Widget _buildTermsSection({required TranslationService translationService}) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        SizedBox(
          width: 24,
          height: 24,
          child: Checkbox(
            value: _termsAccepted,
            onChanged: (value) {
              setState(() => _termsAccepted = value ?? false);
            },
            activeColor: const Color(0xFF2196F3),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(4),
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: GestureDetector(
            onTap: () => setState(() => _termsAccepted = !_termsAccepted),
            child: Text(
              translationService.translate('acceptTerms'),
              style: TextStyle(
                fontSize: 12,
                color: Colors.black87,
                height: 1.0,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ),
        const SizedBox(width: 12),
        SizedBox(
          height: 36,
          child: ElevatedButton(
            onPressed: () => _showTermsDialog(translationService: translationService),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF2196F3),
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              elevation: 0,
            ),
            child: Text(
              translationService.translate('viewTerms'),
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSubmitButton({required TranslationService translationService}) {
    final canContinue = _selectedCountry != null && _termsAccepted;
    
    return SizedBox(
      width: double.infinity,
      height: 46,
      child: ElevatedButton(
        onPressed: canContinue ? _saveSettings : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: canContinue 
              ? const Color(0xFF2196F3) 
              : Colors.grey[300],
          foregroundColor: Colors.white,
          disabledBackgroundColor: Colors.grey[300],
          disabledForegroundColor: Colors.grey[500],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 0,
        ),
        child: _isLoading
            ? const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
            : Text(
                translationService.translate('finish'),
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
      ),
    );
  }

  Widget _buildFooterNote({required TranslationService translationService}) {
    return RichText(
      textAlign: TextAlign.center,
      text: TextSpan(
        style: TextStyle(
          fontSize: 11,
          color: Colors.grey[600],
          height: 1.3,
        ),
        children: [
          TextSpan(
            text: translationService.translate('termsDisclaimer'),
          ),
          WidgetSpan(
            alignment: PlaceholderAlignment.baseline,
            baseline: TextBaseline.alphabetic,
            child: GestureDetector(
              onTap: () => _showTermsDialog(translationService: translationService),
              child: Text(
                translationService.translate('viewTerms'),
                style: TextStyle(
                  color: Color(0xFF2196F3),
                  fontSize: 11,
                ),
              ),
            ),
          ),
        ],
      ),
    );
      },
    );
  }
}