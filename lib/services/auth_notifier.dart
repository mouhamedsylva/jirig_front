import 'package:flutter/foundation.dart';
import 'local_storage_service.dart';
import 'api_service.dart';

/// Service pour notifier les changements d'√©tat d'authentification
class AuthNotifier extends ChangeNotifier {
  bool _isLoggedIn = false;
  Map<String, String>? _userInfo;

  bool get isLoggedIn => _isLoggedIn;
  Map<String, String>? get userInfo => _userInfo;

  /// Initialiser l'√©tat d'authentification
  Future<void> initialize() async {
    print('üîê AuthNotifier: Initialisation...');
    
    // D'abord v√©rifier le localStorage
    _isLoggedIn = await LocalStorageService.isLoggedIn();
    _userInfo = await LocalStorageService.getUserInfo();
    
    // Si on a un email dans localStorage, v√©rifier la session avec l'API
    if (_isLoggedIn) {
      print('üîê Session trouv√©e dans localStorage, v√©rification avec l\'API...');
      await _syncWithApi();
    }
    
    notifyListeners();
  }

  /// Synchroniser avec l'API pour r√©cup√©rer le profil utilisateur
  Future<void> _syncWithApi() async {
    try {
      print('üîÑ AuthNotifier._syncWithApi() - D√©but synchronisation');
      final apiService = ApiService();
      final profile = await apiService.getProfile();
      
      print('üì¶ Profil re√ßu de l\'API: ${profile.keys.join(', ')}');
      print('üìß Email dans le profil: ${profile['sEmail']}');
      print('üë§ Nom dans le profil: ${profile['sNom']}');
      print('üë§ Pr√©nom dans le profil: ${profile['sPrenom']}');
      
      if (profile.isNotEmpty) {
        print('‚úÖ Session valide, mise √† jour du profil depuis l\'API');
        
        // Sauvegarder le profil complet dans SharedPreferences
        await LocalStorageService.saveProfile({
          'iProfile': profile['iProfile']?.toString() ?? '',
          'iBasket': profile['iBasket']?.toString() ?? '',
          'sPaysFav': profile['sPaysFav']?.toString() ?? '',
          'sPaysLangue': profile['sPaysLangue']?.toString() ?? '',
          'sEmail': profile['sEmail']?.toString() ?? '',
          'sNom': profile['sNom']?.toString() ?? '',
          'sPrenom': profile['sPrenom']?.toString() ?? '',
          'sPhoto': profile['sPhoto']?.toString() ?? '',
        });
        
        print('üíæ Profil sauvegard√© dans SharedPreferences');
        
        // Mettre √† jour l'√©tat local
        _isLoggedIn = true;
        _userInfo = await LocalStorageService.getUserInfo();
        print('üë§ UserInfo apr√®s sync: $_userInfo');
      } else {
        print('‚ö†Ô∏è Session expir√©e ou invalide, d√©connexion');
        await onLogout();
      }
    } catch (e) {
      print('‚ùå Erreur lors de la synchronisation avec l\'API: $e');
      print('‚ùå Stack trace: ${StackTrace.current}');
      // En cas d'erreur r√©seau, garder la session locale
    }
  }

  /// Mettre √† jour l'√©tat apr√®s connexion
  Future<void> onLogin() async {
    print('üîê AuthNotifier: onLogin appel√©');
    await _syncWithApi();
    notifyListeners();
  }

  /// Mettre √† jour l'√©tat apr√®s d√©connexion
  Future<void> onLogout() async {
    print('üîê AuthNotifier: onLogout appel√©');
    await LocalStorageService.clearProfile();
    _isLoggedIn = false;
    _userInfo = null;
    notifyListeners();
  }

  /// Recharger les informations utilisateur
  Future<void> refresh() async {
    print('üîê AuthNotifier: refresh appel√©');
    
    // V√©rifier d'abord le localStorage
    _isLoggedIn = await LocalStorageService.isLoggedIn();
    
    if (_isLoggedIn) {
      // Synchroniser avec l'API pour obtenir les derni√®res infos
      await _syncWithApi();
    } else {
      _userInfo = null;
    }
    
    notifyListeners();
  }
}

